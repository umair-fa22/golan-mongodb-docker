name: CI — build, scan, test, image, deploy

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build-install:
    name: Build & Install
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.23'

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/.cache/go-mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Go mod download
        run: go mod download

      - name: Go build
        run: go build -v ./...

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: build-install
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install gosec
        run: |
          GOBIN=$GITHUB_WORKSPACE/.gobin
          mkdir -p $GOBIN
          export PATH=$GOBIN:$PATH
          go install github.com/securego/gosec/v2/cmd/gosec@latest

      - name: Run gosec
        run: |
          GOBIN=$GITHUB_WORKSPACE/.gobin
          export PATH=$GOBIN:$PATH
          $GOBIN/gosec ./...

  test:
    name: Test (with DB services)
    runs-on: ubuntu-latest
    needs: security-scan
    services:
      mongo:
        image: mongo:6.0
        ports:
          - 27017:27017
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: testdb
        ports:
          - 5432:5432
    env:
      MONGODB_URI: mongodb://mongo:27017
      POSTGRES_DSN: host=postgres user=postgres password=postgres dbname=testdb sslmode=disable
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.24'

      - name: Wait for services
        run: |
          # give services a little time to be ready
          for i in {1..20}; do
            nc -z mongo 27017 && nc -z postgres 5432 && echo "services ready" && exit 0 || sleep 1
          done
          echo "Timed out waiting for services" && exit 1

      - name: Go test (integration)
        env:
          MONGODB_URI: ${{ env.MONGODB_URI }}
          POSTGRES_DSN: ${{ env.POSTGRES_DSN }}
        run: go test -v ./...

  build-and-push:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./Dockerfile
          push: true
          platforms: linux/amd64,linux/arm64
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/golan-mongodb-docker:latest
            ${{ secrets.DOCKERHUB_USERNAME }}/golan-mongodb-docker:${{ github.sha }}

  deploy:
    name: Deploy (conditional)
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Deployment placeholder
        run: |
          echo "Tests passed and branch is main — deployment step would run here."
          echo "Image pushed: ${{ secrets.DOCKERHUB_USERNAME }}/golan-mongodb-docker:latest"
